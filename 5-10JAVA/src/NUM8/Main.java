package NUM8;

import NUM8.Command.*;
import NUM8.CoR.*;
//Поведенческие паттерны проектирования позволяют расширять
//поведение системы и взаимодействие различных объектов между собой.

//Паттерн «Цепочка обязанностей» позволяет передавать запросы по
//специальной цепочке обработчиков.

//Паттерн «Команда» инкапсулирует некий запрос в объект, позволяя
//передавать их другим объектам для обработки.

//Паттерн «Итератор» позволяет обходить множества элементов
//последовательно.

//Паттерн «Посредник» перемещает взаимодействие между отдельными
//объектами в специальный класс-посредник.

//Паттерн «Снимок» позволяет сохранять предыдущие состояние
//некоторого объекта, не раскрывая его реализации.

//Паттерн «Наблюдатель» используется для создания механизма
//подписки на события.

//Паттерн «Состояние» позволяет объектам менять свое поведение в
//зависимости от состояния.

//Паттерн «Стратегия» позволяет определить семейство различных
//алгоритмов, которые можно заменять. Определяет некоторый алгоритм и позволяет его отдельные шаги делегировать подклассам.

import NUM8.Command.*;

import java.io.IOException;

//Паттерн «Посетитель» позволяет выполнять одну операцию над
//группой различных объектов, при этом позволяя создавать новую операцию
//без изменения классов, над которыми она выполняется.
public class Main {
    //1) Цепочка обязанностей, Команда.
    public static void main(String[] args){
        cor();
        command();
    }
    //Паттерн «Цепочка обязанностей» позволяет передавать запросы по
    //специальной цепочке обработчиков.
    //объекты ConcreteHandler1, ConcreteHandler2 и ConcreteHandler3 связаны в цепочку таким образом,
    // что каждый следующий обработчик получает запрос, если его не смог обработать предыдущий.
    // При выполнении кода объект handler1 получает запрос с payload = 5 и сам обрабатывает его.
    // При получении запроса с payload = 15 он передает его следующему обработчику – handler2,
    // который также смог обработать этот запрос. Последний запрос с payload = 25 обрабатывается handler3.

    public static void cor(){ //Chain of responsibility
        Handler handler1 = new ConcreteHandler1();
        Handler handler2 = new ConcreteHandler2();
        Handler handler3 = new ConcreteHandler3();

        handler1.setNext(handler2);
        handler2.setNext(handler3);

        handler1.handleRequest(new Request(5));
        handler1.handleRequest(new Request(15));
        handler1.handleRequest(new Request(25));
    }
    //Паттерн «Команда» инкапсулирует некий запрос в объект, позволяя
    //передавать их другим объектам для обработки.
    //есть интерфейс Command, который содержит метод execute(), классы LightOnCommand и LightOffCommand,
    // которые реализуют интерфейс Command и содержат ссылку на объект Light, класс Light,
    // который представляет собой элементарный класс со своими методами - включения и выключения света,
    // класс RemoteControl, который содержит ссылку на объект команды и метод pressButton(), выполняющий команду.
    public static void command(){
        Light light = new Light();
        RemoteControl remote = new RemoteControl();

        Command lightOn = new LightOnCommand(light);
        Command lightOff = new LightOffCommand(light);

        remote.setCommand(lightOn);
        remote.pressButton();

        remote.setCommand(lightOff);
        remote.pressButton();
    }
}
